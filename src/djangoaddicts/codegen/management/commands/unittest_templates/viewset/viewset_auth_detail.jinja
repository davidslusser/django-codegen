{% if view.permission_dict.GET -%}
def test_{{ route.name|replace("-", "_") }}_get_authorized(self):
        """ verify that a get request to {{ route.name }} endpoint for an authorized user
        returns a 200 and the row content is found """
        url = reverse('{{ route.app_name }}:{{ route.name }}'{% if '-list' not in route.name %}, args=[getattr(self.row, '{{ view.lookup_field }}')]{% endif %})
        client = create_custom_client('{{ view.permission_dict.GET|first }}')
        response = client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.json()['{% if view.lookup_field == 'pk' %}{{ view.model._meta.pk.name }}{% else %}{{ view.lookup_field }}{% endif %}'], getattr(self.row, '{{ view.lookup_field }}'))

    def test_{{ route.name|replace("-", "_") }}_get_unauthorized(self):
        """ verify that a get request to the {{ route.name }} endpoint for an unauthorized user
        returns a 401 and the row content is not found """
        url = reverse('{{ route.app_name }}:{{ route.name }}'{% if '-list' not in route.name %}, args=[getattr(self.row, '{{ view.lookup_field }}')]{% endif %})
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)
        self.assertNotIn(getattr(self.row, '{{ view.lookup_field }}'), response.json())
    {% if view.permission_dict.PATCH %}
    def test_{{ route.name|replace("-", "_") }}_patch_authorized(self):
        """ verify that a post request to {{ route.name }} endpoint for an authorized user
        returns a 200 and the updated row content is found """
        url = reverse('{{ route.app_name }}:{{ route.name }}'{% if '-list' not in route.name %}, args=[getattr(self.row, '{{ view.lookup_field }}')]{% endif %})
        client = create_custom_client('{{ view.permission_dict.PATCH|first }}')
        response = client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
    {% endif %}
{%- else -%}
    def test_{{ route.name|replace("-", "_") }}_get(self):
        """ verify the {{ route.name }} endpoint returns a 200 and the row content is found """
        url = reverse('{{ route.app_name }}:{{ route.name }}'{% if '-list' not in route.name %}, args=[getattr(self.row, '{{ view.lookup_field }}')]{% endif %})
        response = self.client.get(url, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertTrue(response.json()['{% if view.lookup_field == 'pk' %}{{ view.model._meta.pk.name }}{% else %}{{ view.lookup_field }}{% endif %}']), getattr(self.row, '{{ view.lookup_field }}')
{%- endif %}
{% if view.permission_dict.PATCH %}
    {% for field in view.writable_fields %}
    def test_{{ route.name|replace("-", "_") }}_patch_{{ field }}_authorized(self):
        """ verify that a patch request to {{ route.name }} endpoint for an authorized user
        returns a 200 and the updated row content is found """
        url = reverse('{{ route.app_name }}:{{ route.name }}'{% if '-list' not in route.name %}, args=[getattr(self.row, '{{ view.lookup_field }}')]{% endif %})
        client = create_custom_client('{{ view.permission_dict.PATCH|first }}')
        updated_value = baker.prepare('{{ view.model._meta.app_label }}.{{ view.model.__name__}}')
        payload = {"{{ field }}": updated_value.{{ field }}}
        response = client.patch(url, payload=payload, format='json')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertNotEqual(getattr(self.row, '{{ field }}'), response.json()["{{ field }}"])
    {% endfor %}
{% endif %}